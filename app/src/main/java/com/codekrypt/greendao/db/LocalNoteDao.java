package com.codekrypt.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_NOTE".
*/
public class LocalNoteDao extends AbstractDao<LocalNote, Long> {

    public static final String TABLENAME = "LOCAL_NOTE";

    /**
     * Properties of entity LocalNote.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, java.util.Date.class, "Date", false, "DATE");
        public final static Property Title = new Property(2, String.class, "Title", false, "TITLE");
        public final static Property Topic = new Property(3, String.class, "Topic", false, "TOPIC");
        public final static Property FilePath = new Property(4, String.class, "filePath", false, "FILE_PATH");
    }


    public LocalNoteDao(DaoConfig config) {
        super(config);
    }
    
    public LocalNoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_NOTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATE\" INTEGER NOT NULL ," + // 1: Date
                "\"TITLE\" TEXT NOT NULL ," + // 2: Title
                "\"TOPIC\" TEXT," + // 3: Topic
                "\"FILE_PATH\" TEXT NOT NULL );"); // 4: filePath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_NOTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalNote entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDate().getTime());
        stmt.bindString(3, entity.getTitle());
 
        String Topic = entity.getTopic();
        if (Topic != null) {
            stmt.bindString(4, Topic);
        }
        stmt.bindString(5, entity.getFilePath());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalNote entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDate().getTime());
        stmt.bindString(3, entity.getTitle());
 
        String Topic = entity.getTopic();
        if (Topic != null) {
            stmt.bindString(4, Topic);
        }
        stmt.bindString(5, entity.getFilePath());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LocalNote readEntity(Cursor cursor, int offset) {
        LocalNote entity = new LocalNote( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // Date
            cursor.getString(offset + 2), // Title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Topic
            cursor.getString(offset + 4) // filePath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalNote entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setTitle(cursor.getString(offset + 2));
        entity.setTopic(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFilePath(cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocalNote entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocalNote entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalNote entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
